"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-simple-code-editor";
exports.ids = ["vendor-chunks/react-simple-code-editor"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-simple-code-editor/lib/index.js":
/*!************************************************************!*\
  !*** ./node_modules/react-simple-code-editor/lib/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar React = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar KEYCODE_ENTER = 13;\nvar KEYCODE_TAB = 9;\nvar KEYCODE_BACKSPACE = 8;\nvar KEYCODE_Y = 89;\nvar KEYCODE_Z = 90;\nvar KEYCODE_M = 77;\nvar KEYCODE_PARENS = 57;\nvar KEYCODE_BRACKETS = 219;\nvar KEYCODE_QUOTE = 222;\nvar KEYCODE_BACK_QUOTE = 192;\nvar KEYCODE_ESCAPE = 27;\nvar HISTORY_LIMIT = 100;\nvar HISTORY_TIME_GAP = 3000;\nvar isWindows = typeof window !== 'undefined' &&\n    'navigator' in window &&\n    /Win/i.test(navigator.platform);\nvar isMacLike = typeof window !== 'undefined' &&\n    'navigator' in window &&\n    /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\nvar className = 'npm__react-simple-code-editor__textarea';\nvar cssText = /* CSS */ \"\\n/**\\n * Reset the text fill color so that placeholder is visible\\n */\\n.\".concat(className, \":empty {\\n  -webkit-text-fill-color: inherit !important;\\n}\\n\\n/**\\n * Hack to apply on some CSS on IE10 and IE11\\n */\\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\\n  /**\\n    * IE doesn't support '-webkit-text-fill-color'\\n    * So we use 'color: transparent' to make the text transparent on IE\\n    * Unlike other browsers, it doesn't affect caret color in IE\\n    */\\n  .\").concat(className, \" {\\n    color: transparent !important;\\n  }\\n\\n  .\").concat(className, \"::selection {\\n    background-color: #accef7 !important;\\n    color: transparent !important;\\n  }\\n}\\n\");\nvar Editor = /** @class */ (function (_super) {\n    __extends(Editor, _super);\n    function Editor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            capture: true,\n        };\n        _this._recordCurrentState = function () {\n            var input = _this._input;\n            if (!input)\n                return;\n            // Save current state of the input\n            var value = input.value, selectionStart = input.selectionStart, selectionEnd = input.selectionEnd;\n            _this._recordChange({\n                value: value,\n                selectionStart: selectionStart,\n                selectionEnd: selectionEnd,\n            });\n        };\n        _this._getLines = function (text, position) {\n            return text.substring(0, position).split('\\n');\n        };\n        _this._recordChange = function (record, overwrite) {\n            var _a, _b, _c;\n            if (overwrite === void 0) { overwrite = false; }\n            var _d = _this._history, stack = _d.stack, offset = _d.offset;\n            if (stack.length && offset > -1) {\n                // When something updates, drop the redo operations\n                _this._history.stack = stack.slice(0, offset + 1);\n                // Limit the number of operations to 100\n                var count = _this._history.stack.length;\n                if (count > HISTORY_LIMIT) {\n                    var extras = count - HISTORY_LIMIT;\n                    _this._history.stack = stack.slice(extras, count);\n                    _this._history.offset = Math.max(_this._history.offset - extras, 0);\n                }\n            }\n            var timestamp = Date.now();\n            if (overwrite) {\n                var last = _this._history.stack[_this._history.offset];\n                if (last && timestamp - last.timestamp < HISTORY_TIME_GAP) {\n                    // A previous entry exists and was in short interval\n                    // Match the last word in the line\n                    var re = /[^a-z0-9]([a-z0-9]+)$/i;\n                    // Get the previous line\n                    var previous = (_a = _this._getLines(last.value, last.selectionStart)\n                        .pop()) === null || _a === void 0 ? void 0 : _a.match(re);\n                    // Get the current line\n                    var current = (_b = _this._getLines(record.value, record.selectionStart)\n                        .pop()) === null || _b === void 0 ? void 0 : _b.match(re);\n                    if ((previous === null || previous === void 0 ? void 0 : previous[1]) && ((_c = current === null || current === void 0 ? void 0 : current[1]) === null || _c === void 0 ? void 0 : _c.startsWith(previous[1]))) {\n                        // The last word of the previous line and current line match\n                        // Overwrite previous entry so that undo will remove whole word\n                        _this._history.stack[_this._history.offset] = __assign(__assign({}, record), { timestamp: timestamp });\n                        return;\n                    }\n                }\n            }\n            // Add the new operation to the stack\n            _this._history.stack.push(__assign(__assign({}, record), { timestamp: timestamp }));\n            _this._history.offset++;\n        };\n        _this._updateInput = function (record) {\n            var input = _this._input;\n            if (!input)\n                return;\n            // Update values and selection state\n            input.value = record.value;\n            input.selectionStart = record.selectionStart;\n            input.selectionEnd = record.selectionEnd;\n            _this.props.onValueChange(record.value);\n        };\n        _this._applyEdits = function (record) {\n            // Save last selection state\n            var input = _this._input;\n            var last = _this._history.stack[_this._history.offset];\n            if (last && input) {\n                _this._history.stack[_this._history.offset] = __assign(__assign({}, last), { selectionStart: input.selectionStart, selectionEnd: input.selectionEnd });\n            }\n            // Save the changes\n            _this._recordChange(record);\n            _this._updateInput(record);\n        };\n        _this._undoEdit = function () {\n            var _a = _this._history, stack = _a.stack, offset = _a.offset;\n            // Get the previous edit\n            var record = stack[offset - 1];\n            if (record) {\n                // Apply the changes and update the offset\n                _this._updateInput(record);\n                _this._history.offset = Math.max(offset - 1, 0);\n            }\n        };\n        _this._redoEdit = function () {\n            var _a = _this._history, stack = _a.stack, offset = _a.offset;\n            // Get the next edit\n            var record = stack[offset + 1];\n            if (record) {\n                // Apply the changes and update the offset\n                _this._updateInput(record);\n                _this._history.offset = Math.min(offset + 1, stack.length - 1);\n            }\n        };\n        _this._handleKeyDown = function (e) {\n            var _a = _this.props, tabSize = _a.tabSize, insertSpaces = _a.insertSpaces, ignoreTabKey = _a.ignoreTabKey, onKeyDown = _a.onKeyDown;\n            if (onKeyDown) {\n                onKeyDown(e);\n                if (e.defaultPrevented) {\n                    return;\n                }\n            }\n            if (e.keyCode === KEYCODE_ESCAPE) {\n                e.currentTarget.blur();\n            }\n            var _b = e.currentTarget, value = _b.value, selectionStart = _b.selectionStart, selectionEnd = _b.selectionEnd;\n            var tabCharacter = (insertSpaces ? ' ' : '\\t').repeat(tabSize);\n            if (e.keyCode === KEYCODE_TAB && !ignoreTabKey && _this.state.capture) {\n                // Prevent focus change\n                e.preventDefault();\n                if (e.shiftKey) {\n                    // Unindent selected lines\n                    var linesBeforeCaret = _this._getLines(value, selectionStart);\n                    var startLine_1 = linesBeforeCaret.length - 1;\n                    var endLine_1 = _this._getLines(value, selectionEnd).length - 1;\n                    var nextValue = value\n                        .split('\\n')\n                        .map(function (line, i) {\n                        if (i >= startLine_1 &&\n                            i <= endLine_1 &&\n                            line.startsWith(tabCharacter)) {\n                            return line.substring(tabCharacter.length);\n                        }\n                        return line;\n                    })\n                        .join('\\n');\n                    if (value !== nextValue) {\n                        var startLineText = linesBeforeCaret[startLine_1];\n                        _this._applyEdits({\n                            value: nextValue,\n                            // Move the start cursor if first line in selection was modified\n                            // It was modified only if it started with a tab\n                            selectionStart: (startLineText === null || startLineText === void 0 ? void 0 : startLineText.startsWith(tabCharacter))\n                                ? selectionStart - tabCharacter.length\n                                : selectionStart,\n                            // Move the end cursor by total number of characters removed\n                            selectionEnd: selectionEnd - (value.length - nextValue.length),\n                        });\n                    }\n                }\n                else if (selectionStart !== selectionEnd) {\n                    // Indent selected lines\n                    var linesBeforeCaret = _this._getLines(value, selectionStart);\n                    var startLine_2 = linesBeforeCaret.length - 1;\n                    var endLine_2 = _this._getLines(value, selectionEnd).length - 1;\n                    var startLineText = linesBeforeCaret[startLine_2];\n                    _this._applyEdits({\n                        value: value\n                            .split('\\n')\n                            .map(function (line, i) {\n                            if (i >= startLine_2 && i <= endLine_2) {\n                                return tabCharacter + line;\n                            }\n                            return line;\n                        })\n                            .join('\\n'),\n                        // Move the start cursor by number of characters added in first line of selection\n                        // Don't move it if it there was no text before cursor\n                        selectionStart: startLineText && /\\S/.test(startLineText)\n                            ? selectionStart + tabCharacter.length\n                            : selectionStart,\n                        // Move the end cursor by total number of characters added\n                        selectionEnd: selectionEnd + tabCharacter.length * (endLine_2 - startLine_2 + 1),\n                    });\n                }\n                else {\n                    var updatedSelection = selectionStart + tabCharacter.length;\n                    _this._applyEdits({\n                        // Insert tab character at caret\n                        value: value.substring(0, selectionStart) +\n                            tabCharacter +\n                            value.substring(selectionEnd),\n                        // Update caret position\n                        selectionStart: updatedSelection,\n                        selectionEnd: updatedSelection,\n                    });\n                }\n            }\n            else if (e.keyCode === KEYCODE_BACKSPACE) {\n                var hasSelection = selectionStart !== selectionEnd;\n                var textBeforeCaret = value.substring(0, selectionStart);\n                if (textBeforeCaret.endsWith(tabCharacter) && !hasSelection) {\n                    // Prevent default delete behaviour\n                    e.preventDefault();\n                    var updatedSelection = selectionStart - tabCharacter.length;\n                    _this._applyEdits({\n                        // Remove tab character at caret\n                        value: value.substring(0, selectionStart - tabCharacter.length) +\n                            value.substring(selectionEnd),\n                        // Update caret position\n                        selectionStart: updatedSelection,\n                        selectionEnd: updatedSelection,\n                    });\n                }\n            }\n            else if (e.keyCode === KEYCODE_ENTER) {\n                // Ignore selections\n                if (selectionStart === selectionEnd) {\n                    // Get the current line\n                    var line = _this._getLines(value, selectionStart).pop();\n                    var matches = line === null || line === void 0 ? void 0 : line.match(/^\\s+/);\n                    if (matches === null || matches === void 0 ? void 0 : matches[0]) {\n                        e.preventDefault();\n                        // Preserve indentation on inserting a new line\n                        var indent = '\\n' + matches[0];\n                        var updatedSelection = selectionStart + indent.length;\n                        _this._applyEdits({\n                            // Insert indentation character at caret\n                            value: value.substring(0, selectionStart) +\n                                indent +\n                                value.substring(selectionEnd),\n                            // Update caret position\n                            selectionStart: updatedSelection,\n                            selectionEnd: updatedSelection,\n                        });\n                    }\n                }\n            }\n            else if (e.keyCode === KEYCODE_PARENS ||\n                e.keyCode === KEYCODE_BRACKETS ||\n                e.keyCode === KEYCODE_QUOTE ||\n                e.keyCode === KEYCODE_BACK_QUOTE) {\n                var chars = void 0;\n                if (e.keyCode === KEYCODE_PARENS && e.shiftKey) {\n                    chars = ['(', ')'];\n                }\n                else if (e.keyCode === KEYCODE_BRACKETS) {\n                    if (e.shiftKey) {\n                        chars = ['{', '}'];\n                    }\n                    else {\n                        chars = ['[', ']'];\n                    }\n                }\n                else if (e.keyCode === KEYCODE_QUOTE) {\n                    if (e.shiftKey) {\n                        chars = ['\"', '\"'];\n                    }\n                    else {\n                        chars = [\"'\", \"'\"];\n                    }\n                }\n                else if (e.keyCode === KEYCODE_BACK_QUOTE && !e.shiftKey) {\n                    chars = ['`', '`'];\n                }\n                // If text is selected, wrap them in the characters\n                if (selectionStart !== selectionEnd && chars) {\n                    e.preventDefault();\n                    _this._applyEdits({\n                        value: value.substring(0, selectionStart) +\n                            chars[0] +\n                            value.substring(selectionStart, selectionEnd) +\n                            chars[1] +\n                            value.substring(selectionEnd),\n                        // Update caret position\n                        selectionStart: selectionStart,\n                        selectionEnd: selectionEnd + 2,\n                    });\n                }\n            }\n            else if ((isMacLike\n                ? // Trigger undo with ⌘+Z on Mac\n                    e.metaKey && e.keyCode === KEYCODE_Z\n                : // Trigger undo with Ctrl+Z on other platforms\n                    e.ctrlKey && e.keyCode === KEYCODE_Z) &&\n                !e.shiftKey &&\n                !e.altKey) {\n                e.preventDefault();\n                _this._undoEdit();\n            }\n            else if ((isMacLike\n                ? // Trigger redo with ⌘+Shift+Z on Mac\n                    e.metaKey && e.keyCode === KEYCODE_Z && e.shiftKey\n                : isWindows\n                    ? // Trigger redo with Ctrl+Y on Windows\n                        e.ctrlKey && e.keyCode === KEYCODE_Y\n                    : // Trigger redo with Ctrl+Shift+Z on other platforms\n                        e.ctrlKey && e.keyCode === KEYCODE_Z && e.shiftKey) &&\n                !e.altKey) {\n                e.preventDefault();\n                _this._redoEdit();\n            }\n            else if (e.keyCode === KEYCODE_M &&\n                e.ctrlKey &&\n                (isMacLike ? e.shiftKey : true)) {\n                e.preventDefault();\n                // Toggle capturing tab key so users can focus away\n                _this.setState(function (state) { return ({\n                    capture: !state.capture,\n                }); });\n            }\n        };\n        _this._handleChange = function (e) {\n            var _a = e.currentTarget, value = _a.value, selectionStart = _a.selectionStart, selectionEnd = _a.selectionEnd;\n            _this._recordChange({\n                value: value,\n                selectionStart: selectionStart,\n                selectionEnd: selectionEnd,\n            }, true);\n            _this.props.onValueChange(value);\n        };\n        _this._history = {\n            stack: [],\n            offset: -1,\n        };\n        _this._input = null;\n        return _this;\n    }\n    Editor.prototype.componentDidMount = function () {\n        this._recordCurrentState();\n    };\n    Object.defineProperty(Editor.prototype, \"session\", {\n        get: function () {\n            return {\n                history: this._history,\n            };\n        },\n        set: function (session) {\n            this._history = session.history;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Editor.prototype.render = function () {\n        var _this = this;\n        var _a = this.props, value = _a.value, style = _a.style, padding = _a.padding, highlight = _a.highlight, textareaId = _a.textareaId, textareaClassName = _a.textareaClassName, autoFocus = _a.autoFocus, disabled = _a.disabled, form = _a.form, maxLength = _a.maxLength, minLength = _a.minLength, name = _a.name, placeholder = _a.placeholder, readOnly = _a.readOnly, required = _a.required, onClick = _a.onClick, onFocus = _a.onFocus, onBlur = _a.onBlur, onKeyUp = _a.onKeyUp, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onKeyDown = _a.onKeyDown, onValueChange = _a.onValueChange, tabSize = _a.tabSize, insertSpaces = _a.insertSpaces, ignoreTabKey = _a.ignoreTabKey, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        preClassName = _a.preClassName, rest = __rest(_a, [\"value\", \"style\", \"padding\", \"highlight\", \"textareaId\", \"textareaClassName\", \"autoFocus\", \"disabled\", \"form\", \"maxLength\", \"minLength\", \"name\", \"placeholder\", \"readOnly\", \"required\", \"onClick\", \"onFocus\", \"onBlur\", \"onKeyUp\", \"onKeyDown\", \"onValueChange\", \"tabSize\", \"insertSpaces\", \"ignoreTabKey\", \"preClassName\"]);\n        var contentStyle = {\n            paddingTop: typeof padding === 'object' ? padding.top : padding,\n            paddingRight: typeof padding === 'object' ? padding.right : padding,\n            paddingBottom: typeof padding === 'object' ? padding.bottom : padding,\n            paddingLeft: typeof padding === 'object' ? padding.left : padding,\n        };\n        var highlighted = highlight(value);\n        return (React.createElement(\"div\", __assign({}, rest, { style: __assign(__assign({}, styles.container), style) }),\n            React.createElement(\"pre\", __assign({ className: preClassName, \"aria-hidden\": \"true\", style: __assign(__assign(__assign({}, styles.editor), styles.highlight), contentStyle) }, (typeof highlighted === 'string'\n                ? { dangerouslySetInnerHTML: { __html: highlighted + '<br />' } }\n                : { children: highlighted }))),\n            React.createElement(\"textarea\", { ref: function (c) { return (_this._input = c); }, style: __assign(__assign(__assign({}, styles.editor), styles.textarea), contentStyle), className: className + (textareaClassName ? \" \".concat(textareaClassName) : ''), id: textareaId, value: value, onChange: this._handleChange, onKeyDown: this._handleKeyDown, onClick: onClick, onKeyUp: onKeyUp, onFocus: onFocus, onBlur: onBlur, disabled: disabled, form: form, maxLength: maxLength, minLength: minLength, name: name, placeholder: placeholder, readOnly: readOnly, required: required, autoFocus: autoFocus, autoCapitalize: \"off\", autoComplete: \"off\", autoCorrect: \"off\", spellCheck: false, \"data-gramm\": false }),\n            React.createElement(\"style\", { dangerouslySetInnerHTML: { __html: cssText } })));\n    };\n    Editor.defaultProps = {\n        tabSize: 2,\n        insertSpaces: true,\n        ignoreTabKey: false,\n        padding: 0,\n    };\n    return Editor;\n}(React.Component));\nexports[\"default\"] = Editor;\nvar styles = {\n    container: {\n        position: 'relative',\n        textAlign: 'left',\n        boxSizing: 'border-box',\n        padding: 0,\n        overflow: 'hidden',\n    },\n    textarea: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: '100%',\n        width: '100%',\n        resize: 'none',\n        color: 'inherit',\n        overflow: 'hidden',\n        MozOsxFontSmoothing: 'grayscale',\n        WebkitFontSmoothing: 'antialiased',\n        WebkitTextFillColor: 'transparent',\n    },\n    highlight: {\n        position: 'relative',\n        pointerEvents: 'none',\n    },\n    editor: {\n        margin: 0,\n        border: 0,\n        background: 'none',\n        boxSizing: 'inherit',\n        display: 'inherit',\n        fontFamily: 'inherit',\n        fontSize: 'inherit',\n        fontStyle: 'inherit',\n        fontVariantLigatures: 'inherit',\n        fontWeight: 'inherit',\n        letterSpacing: 'inherit',\n        lineHeight: 'inherit',\n        tabSize: 'inherit',\n        textIndent: 'inherit',\n        textRendering: 'inherit',\n        textTransform: 'inherit',\n        whiteSpace: 'pre-wrap',\n        wordBreak: 'keep-all',\n        overflowWrap: 'break-word',\n    },\n};\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-simple-code-editor/lib/index.js\n");

/***/ })

};
;